package com.highradius.implementation;

import com.highradius.connection.DatabaseConnection;
import com.highradius.model.Invoice;
import java.util.ArrayList;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

public class InvoiceDaoImpl implements InvoiceDao {
	private DatabaseConnection databaseConnection;

    public InvoiceDaoImpl() {
        databaseConnection = new DatabaseConnection();
    }

    @Override
    public List<Invoice> getInvoice() throws ClassNotFoundException {
        return databaseConnection.getInvoices();
    }
 
    @Override
    public void insertInvoice(Invoice invoice) throws ClassNotFoundException {
        databaseConnection.addInvoice(invoice);
    }

    @Override
    public void updateInvoice(String id, Invoice invoice) {
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            // Get a database connection
            connection = DatabaseConnection.getConnection();

            // Create the SQL query to update the invoice data
            String sql = "UPDATE h2h_oap SET " +
                    "CUSTOMER_ORDER_ID = ?, " +
                    "SALES_ORG = ?, " +
                    "DISTRIBUTION_CHANNEL = ?, " +
                    "DIVISION = ?, " +
                    "RELEASED_CREDIT_VALUE = ?, " +
                    "PURCHASE_ORDER_TYPE = ?, " +
                    "COMPANY_CODE = ?, " +
                    "ORDER_CREATION_DATE = ?, " +
                    "ORDER_CREATION_TIME = ?, " +
                    "CREDIT_CONTROL_AREA = ?, " +
                    "SOLD_TO_PARTY = ?, " +
                    "ORDER_AMOUNT = ?, " +
                    "REQUESTED_DELIVERY_DATE = ?, " +
                    "ORDER_CURRENCY = ?, " +
                    "CREDIT_STATUS = ?, " +
                    "CUSTOMER_NUMBER = ?, " +
                    "AMOUNT_IN_USD = ?, " +
                    "UNIQUE_CUST_ID = ? " +
                    "WHERE CUSTOMER_ORDER_ID = ?";

            // Prepare the statement
            statement = connection.prepareStatement(sql);

            // Set the parameter values for the SQL query
            statement.setInt(1, invoice.getCustomerOrderID());
            statement.setInt(2, invoice.getSalesOrg());
            statement.setString(3, invoice.getDistributionChannel());
            statement.setString(4, invoice.getDivision());
            statement.setFloat(5, invoice.getReleasedCreditValue());
            statement.setString(6, invoice.getPurchaseOrderType());
            statement.setInt(7, invoice.getCompanyCode());
            statement.setString(8, invoice.getOrderCreationDate());
            statement.setString(9, invoice.getOrderCreationTime());
            statement.setString(10, invoice.getCreditControlArea());
            statement.setInt(11, invoice.getSoldToParty());
            statement.setFloat(12, invoice.getOrderAmount());
            statement.setString(13, invoice.getRequestedDeliveryDate());
            statement.setString(14, invoice.getOrderCurrency());
            statement.setString(15, invoice.getCreditStatus());
            statement.setInt(16, invoice.getCustomerNumber());
            statement.setFloat(17, invoice.getAmountInUsd());
            statement.setLong(18, invoice.getUniqueCustNumber());
            statement.setInt(19, invoice.getCustomerOrderID());

            // Execute the query to update the invoice data
            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Invoice updated successfully.");
            } else {
                System.out.println("Failed to update the invoice.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close the resources
            try {
                if (statement != null)
                    statement.close();
                if (connection != null)
                    connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void deleteInvoice(String id) {
        Connection connection = null;
        PreparedStatement statement = null;

        try {
            // Get a database connection
            connection = DatabaseConnection.getConnection();

            // Create the SQL query to delete the invoice
            String sql = "DELETE FROM h2h_oap WHERE CUSTOMER_ORDER_ID = ?";

            // Prepare the statement
            statement = connection.prepareStatement(sql);

            // Set the parameter value for the SQL query
            statement.setString(1, id);

            // Execute the query to delete the invoice
            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Invoice deleted successfully.");
            } else {
                System.out.println("Failed to delete the invoice.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close the resources
            try {
                if (statement != null)
                    statement.close();
                if (connection != null)
                    connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    public List<Invoice> searchInvoice(String id){

        Connection connection = null;
        PreparedStatement statement = null;
        List<Invoice> invoices = new ArrayList<>();
        ResultSet resultSet = null;

        try {
			Class.forName("com.mysql.cj.jdbc.Driver");
            // Get a database connection
            connection = DatabaseConnection.getConnection();

            // Create the SQL query to search the invoice
            String sql = "SELECT * FROM h2h_oap WHERE CUSTOMER_ORDER_ID = ?";

            // Prepare the statement
            statement = connection.prepareStatement(sql);

            // Set the parameter value for the SQL query
            statement.setString(1, id);

            // Execute the query to search the invoice
            resultSet = statement.executeQuery();

            // Loop through the results and create the invoice object

            while (resultSet.next()) {
                	int slNo = resultSet.getInt("Sl_no");
				int customerOrderID = resultSet.getInt("CUSTOMER_ORDER_ID");
				int salesOrg = resultSet.getInt("SALES_ORG");
				String distributionChannel = resultSet.getString("DISTRIBUTION_CHANNEL");
				String division = resultSet.getString("DIVISION");
				float releasedCreditValue = resultSet.getFloat("RELEASED_CREDIT_VALUE");
				String purchaseOrderType = resultSet.getString("PURCHASE_ORDER_TYPE");
				int companyCode = resultSet.getInt("COMPANY_CODE");
				String orderCreationDate = resultSet.getString("ORDER_CREATION_DATE");
				String orderCreationTime = resultSet.getString("ORDER_CREATION_TIME");
				String creditControlArea = resultSet.getString("CREDIT_CONTROL_AREA");
				int soldToParty = resultSet.getInt("SOLD_TO_PARTY");
				float orderAmount = resultSet.getFloat("ORDER_AMOUNT");
				String requestedDeliveryDate = resultSet.getString("REQUESTED_DELIVERY_DATE");
				String orderCurrency = resultSet.getString("ORDER_CURRENCY");
				String creditStatus = resultSet.getString("CREDIT_STATUS");
				int customerNumber = resultSet.getInt("CUSTOMER_NUMBER");
				float amountInUsd = resultSet.getFloat("AMOUNT_IN_USD");
				long uniqueCustNumber = resultSet.getLong("UNIQUE_CUST_ID");

				// Create an Invoice object with the retrieved data
				Invoice invoice = new Invoice(slNo, customerOrderID, salesOrg, distributionChannel, division,
						releasedCreditValue, purchaseOrderType, companyCode, orderCreationDate, orderCreationTime,
						creditControlArea, soldToParty, orderAmount, requestedDeliveryDate, orderCurrency, creditStatus,
						customerNumber, amountInUsd, uniqueCustNumber);

				// Add the invoice to the list
				invoices.add(invoice);
            }

            if (invoices.size() > 0) {
                System.out.println("Invoice found successfully.");
            } else {
                System.out.println("Failed to find the invoice.");
            }
        }
        catch (SQLException e) {

            e.printStackTrace();} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        

            return invoices;
        


    }


}